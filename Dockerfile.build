# ==============================================================================
# Dockerfile для сборки N8N на GitHub Actions
# ==============================================================================
FROM node:22-alpine AS builder

# Установка pnpm
RUN npm install -g pnpm@10

# Установка build зависимостей
RUN apk add --no-cache git graphicsmagick tzdata

WORKDIR /app

# Переменные окружения для сборки
ENV DOCKER_BUILD=true
ENV CI=true
ENV SHELL=/bin/sh

# Копирование исходников
COPY package*.json pnpm-*.yaml turbo.json tsconfig.json ./
COPY patches ./patches
COPY packages ./packages
COPY scripts ./scripts

# Сборка N8N
RUN pnpm install --frozen-lockfile
RUN pnpm add -w tsup prettier vite-plugin-dts
RUN pnpm run build:n8n

# ==============================================================================
# Production Runtime образ
# ==============================================================================
FROM node:22-alpine

# Установка runtime зависимостей (как в официальном n8n-base)
RUN apk add --no-cache git openssh graphicsmagick tini tzdata ca-certificates libc6-compat jq

# Установка npm и full-icu
RUN npm install -g full-icu@1.5.0 npm@11.4.2

ENV NODE_ENV=production
ENV NODE_ICU_DATA=/usr/local/lib/node_modules/full-icu
ENV SHELL=/bin/sh

WORKDIR /home/node

# Копирование готовой сборки из builder stage
COPY --from=builder /app/compiled /usr/local/lib/node_modules/n8n

# Настройка приложения
RUN cd /usr/local/lib/node_modules/n8n && \
    npm rebuild sqlite3 && \
    ln -s /usr/local/lib/node_modules/n8n/bin/n8n /usr/local/bin/n8n && \
    mkdir -p /home/node/.n8n && \
    chown -R node:node /home/node

# Установка canvas для PDF
RUN cd /usr/local/lib/node_modules/n8n/node_modules/pdfjs-dist && npm install @napi-rs/canvas

EXPOSE 5678
USER node

# Базовый entrypoint
CMD ["n8n"] 